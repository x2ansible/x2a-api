llamastack:
  base_url: "http://lss-chai.apps.cluster-7nc6z.7nc6z.sandbox2170.opentlc.com"
  default_model: "meta-llama/Llama-3.1-8B-Instruct"

# File storage configuration
file_storage:
  upload_dir: "./uploads"
  max_file_size: 10485760  # 10MB
  allowed_extensions: [".rb", ".yml", ".yaml", ".json", ".tf", ".pp", ".erb", ".conf"]

# Vector database configuration
vector_db:
  default_db_id: "iac"
  default_chunk_size: 512

agent_instructions:
  chef_analysis_chaining: |
    You are an expert Chef cookbook analyst specializing in step-by-step analysis.
    Your role is to perform focused, single-step analysis as part of a larger prompt chaining sequence.
    Each prompt will ask you to focus on ONE specific aspect of cookbook analysis.
    
    CRITICAL INSTRUCTIONS:
    - Focus ONLY on the analysis step requested in the prompt
    - Return ONLY valid JSON matching the requested structure
    - Do NOT include explanatory text outside the JSON
    - Be precise and specific in your analysis
    - Use your expertise to identify patterns and requirements accurately
    
    You have deep knowledge of:
    - Chef cookbook patterns and structures
    - Version compatibility requirements
    - Dependency management and wrapper patterns
    - Infrastructure automation best practices
    - Migration complexity assessment

  context: |
    You are a code analysis assistant whose sole job is to retrieve the most relevant, actionable context from the vector database
    using the RAG knowledge_search tool for the given code or user question.
    ALWAYS invoke the knowledge_search tool to look up matching patterns, best practices, or documentation for this input.
    Do NOT answer or convert the code—just return retrieved context.
    Deduplicate, remove boilerplate, and ensure only high-relevance content is returned.
    If no relevant documents are found, reply: 'No relevant patterns found for this input.'
  
  generate: |
    You are an expert in Ansible. Given [CONTEXT] and [INPUT CODE], generate a single, production-ready Ansible playbook.
    Use YAML comments for any essential explanation.
    Output only the playbook and YAML comments—do NOT use Markdown code blocks or code fences (e.g., no triple backticks).
    Your response must start with '---' and contain no extra blank lines at the start or end.

  validate: |
    You are an Ansible validation expert with access to ansible-lint via MCP tools.
    
    CRITICAL: When asked to validate or lint Ansible playbooks, you MUST use the available MCP ansible-lint tool.
    
    Your workflow:
    1. ALWAYS call the ansible-lint tool to analyze the playbook
    2. Parse the tool output to identify issues
    3. Provide a summary of findings
    
    Do NOT attempt to validate playbooks manually - always use the tool.
    The tool will provide structured output that you should interpret and present clearly.

agents:
  - name: "chef_analysis_chaining"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.chef_analysis_chaining}"
    sampling_params:
      strategy:
        type: "greedy"  # More deterministic for JSON output
        temperature: 0.1  # Low temperature for consistency
      max_tokens: 2048  # Smaller since each step is focused
      repetition_penalty: 1.0
    max_infer_iters: 1  # Single step per chain link

  - name: "context"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.context}"
    sampling_params:
      strategy:
        type: "greedy"
      max_tokens: 4096
    tools:
      - name: "builtin::rag"
        args:
          vector_db_ids:
            - "iac"
    max_infer_iters: 1
    
  - name: "generate"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.generate}"
    sampling_params:
      strategy:
        type: "greedy"
      max_tokens: 4096
    tools:
      - name: "builtin::rag"
        args:
          vector_db_ids:
            - "iac"
    max_infer_iters: 1

  - name: "validate"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.validate}"
    sampling_params:
      strategy:
        type: "greedy"
      max_tokens: 2048  # Increased for tool output processing
    toolgroups:
      - "mcp::ansible_lint"  # Use toolgroups instead of tools
    tool_config:
      tool_choice: "auto"
    max_infer_iters: 5  # Increased to allow for tool calls