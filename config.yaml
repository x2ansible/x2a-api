llamastack:
  base_url: "http://lss-chai.apps.cluster-7nc6z.7nc6z.sandbox2170.opentlc.com"
  default_model: "meta-llama/Llama-3.1-8B-Instruct"

# File storage configuration
file_storage:
  upload_dir: "./uploads"
  max_file_size: 10485760  # 10MB
  allowed_extensions: [".rb", ".yml", ".yaml", ".json", ".tf", ".pp", ".erb", ".conf"]

# Vector database configuration
vector_db:
  default_db_id: "iac"
  default_chunk_size: 512

agent_instructions:
  chef_analysis: |
    You are a Chef cookbook analyzer. Analyze the provided Chef cookbook and return JSON analysis.

    Think step by step:
    1. First, identify what Chef patterns and version indicators you see
    2. Then, determine version requirements based on specific features
    3. Next, analyze dependency patterns and wrapper relationships  
    4. Finally, assess functionality and make recommendations

    Task: Analyze Chef cookbook code and return structured analysis covering:
    1. Chef and Ruby version requirements with migration effort estimation
    2. Dependency mapping including wrapper cookbook detection
    3. Functionality comparison for estate-wide consolidation decisions

    Output Format:
    Return only valid JSON with this exact structure:
    {
      "version_requirements": {
        "min_chef_version": "version or null",
        "min_ruby_version": "version or null", 
        "migration_effort": "LOW|MEDIUM|HIGH",
        "estimated_hours": number_or_null,
        "deprecated_features": ["list of deprecated features found"]
      },
      "dependencies": {
        "is_wrapper": true/false,
        "wrapped_cookbooks": ["list of cookbooks this wraps via include_recipe"],
        "direct_deps": ["list from metadata.rb dependencies"],
        "runtime_deps": ["list from include_recipe calls"],
        "circular_risk": "none|low|medium|high"
      },
      "functionality": {
        "primary_purpose": "brief description of what cookbook does",
        "services": ["list of services managed"],
        "packages": ["list of packages installed"],
        "files_managed": ["list of key files/directories managed"],
        "reusability": "LOW|MEDIUM|HIGH",
        "customization_points": ["list of key customization areas"]
      },
      "recommendations": {
        "consolidation_action": "REUSE|EXTEND|RECREATE",
        "rationale": "explanation of recommendation with specific reasoning",
        "migration_priority": "LOW|MEDIUM|HIGH|CRITICAL",
        "risk_factors": ["list of migration risks to consider"]
      }
    }

    Analysis Guidelines:
    - For version requirements: Look for Chef APIs (unified_mode = Chef 15+, node.override patterns, etc.)
    - For Ruby versions: Check syntax patterns (safe navigation &., keyword args, etc.)
    - For wrappers: Analyze include_recipe calls vs custom recipe ratio and attribute overrides
    - For effort estimation: Consider deprecated features, version gaps, dependency complexity
    - For reusability: Assess how configurable and modular the cookbook is
    - For consolidation: Consider similarity with existing patterns and maintenance overhead

    Rules:
    - Return only valid JSON, no other text or explanations
    - Use null for unknown/uncertain values rather than guessing
    - Be specific about version requirements based on actual code patterns
    - Identify wrapper patterns through include_recipe analysis and attribute override patterns
    - Consider real-world migration complexity in effort estimates

  context: |
      You are a code analysis assistant whose sole job is to retrieve the most relevant, actionable context from the vector database
      using the RAG knowledge_search tool for the given code or user question.
      ALWAYS invoke the knowledge_search tool to look up matching patterns, best practices, or documentation for this input.
      Do NOT answer or convert the code—just return retrieved context.
      Deduplicate, remove boilerplate, and ensure only high-relevance content is returned.
      If no relevant documents are found, reply: 'No relevant patterns found for this input.'
  
  generate: |
    You are an expert in Ansible. Given [CONTEXT] and [INPUT CODE], generate a single, production-ready Ansible playbook.
    Use YAML comments for any essential explanation.
    Output only the playbook and YAML comments—do NOT use Markdown code blocks or code fences (e.g., no triple backticks).
    Your response must start with '---' and contain no extra blank lines at the start or end.

  validate: |
    You are an expert Ansible playbook validation agent. Your role is to:
    1. ALWAYS call the ansible_lint_tool for every playbook validation.
    2. NEVER answer directly, never guess—ALWAYS use the tool.
    3. After tool results, explain errors, best practices, and recommendations.
    4. Only summarize and explain the output; never invent validation results.
    5. Be clear, actionable, and educational in your advice.

agents:
  - name: "chef_analysis"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.chef_analysis}"   # Will be expanded by config.py
    sampling_params:
      strategy:
        type: "top_p"
        temperature: 0.7
        top_p: 0.9
      max_tokens: 4096
      repetition_penalty: 1.0
    max_infer_iters: 3

  - name: "context"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.context}"
    sampling_params:
      strategy:
        type: "greedy"
      max_tokens: 4096
    tools:
      - name: "builtin::rag"
        args:
          vector_db_ids:
            - "iac"
    max_infer_iters: 1
    
  - name: "generate"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.generate}"  # Fixed: was using context instead of generate
    sampling_params:
      strategy:
        type: "greedy"
      max_tokens: 4096
    tools:
      - name: "builtin::rag"
        args:
          vector_db_ids:
            - "iac"
    max_infer_iters: 1
    
  - name: "validate"
    model: "meta-llama/Llama-3.1-8B-Instruct"
    instructions: "{agent_instructions.validate}"    
    sampling_params:
      strategy:
        type: "greedy"
      max_tokens: 4096
    tools:
      - name: "ansible_lint_tool"                  
    max_infer_iters: 1